name: snowpark-tag-push-publish-update
on:
  push:
    branches:
      - main
    paths:
      - app/**/*
      - backend/**/*
      - frontend/**/*
      - router/**/*
      - .github/workflows/snowpark-tag-push-publish-update.yaml

env:
    BASE_VERSION: V1

jobs:
  docker-push:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        image: [
          { name: eap_backend, context: ./backend },
          { name: eap_frontend, context: ./frontend },
          { name: eap_router, context: ./router },
        ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Snowflake Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.SNOWFLAKE_ACCOUNT }}.registry.snowflakecomputing.com
          username: ${{ secrets.SNOWPARK_PUSH_SNOWFLAKE_USERNAME }}
          password: ${{ secrets.SNOWPARK_PUSH_SNOWFLAKE_PASSWORD }}

      - name: Extract metadata (tags, labels) for ${{ matrix.image.name }}
        id: image-meta
        uses: docker/metadata-action@v5
        with:
          tags: |
                type=sha,prefix=
          images: |
            ${{ secrets.SNOWFLAKE_ACCOUNT }}.registry.snowflakecomputing.com/spcs_app/napp/img_repo/${{ matrix.image.name }}


      - name: Build and push ${{ matrix.image.name }}
        uses: docker/build-push-action@v5
        with:
            context: ${{ matrix.image.context }}
            tags:  ${{ steps.image-meta.outputs.tags }}
            labels: ${{ steps.image-meta.outputs.labels }}
            file: ${{ matrix.image.dockerfile }}
            target: ${{ matrix.image.target }}
            platforms: linux/amd64
            push: true
            cache-from: type=gha
            cache-to: type=gha,mode=max

  # if the registry flakes out on you / hangs, you can try this retry-wrapped action, but
  # it's a little janky, and only supports a single tag/label b/c how the input YAML is processed
  #
  #      - name: Build and push ${{ matrix.image.name }}
  #        uses: Wandalen/wretry.action/main@v3
  #        with:
  #          action: docker/build-push-action@v5
  #          time_out: 120000 # two minutes
  #          attempt_limit: 3
  #          with: |
  #              context: ${{ matrix.image.context }}
  #              tags:  ${{ steps.image-meta.outputs.tags }}
  #              file: ${{ matrix.image.dockerfile }}
  #              target: ${{ matrix.image.target }}
  #              platforms: linux/amd64
  #              push: true
  #              cache-from: type=gha
  #              cache-to: type=gha,mode=max

  create-patch-version:
    runs-on: ubuntu-latest
    needs:
      - docker-push
    steps:
      - uses: actions/checkout@v4

      - name: Set Commit Sha
        run: echo "COMMIT_SHA=$(echo ${{ github.sha }} | head -c 7 )" >> $GITHUB_ENV

      - name: Set Commit Sha
        run: echo "COMMIT_SHA_UPPER=$(echo ${{ github.sha }} | head -c 7 | tr '[:lower:]' '[:upper:]' )" >> $GITHUB_ENV

      - name: Set Package Version
        run: echo "VERSION=${{ env.BASE_VERSION}}-$(date +'%Y-%m-%d-%H-%M-%S')-$COMMIT_SHA" >> $GITHUB_ENV

      - name: Hard code image tag in fullstack.yaml
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "$VERSION_TAG"
          replace: "${{ env.COMMIT_SHA }}"
          regex: false
          include: app/fullstack.tpl.yaml

      - name: Hard code image tag in manifest.yml
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "$VERSION_TAG"
          replace: "${{ env.COMMIT_SHA }}"
          regex: false
          include: app/manifest.tpl.yml

      - name: Copy templated files into place for upload
        run: |
          mv app/fullstack.tpl.yaml app/src/fullstack.yaml
          mv app/manifest.tpl.yml app/src/manifest.yml

      - name: Install SnowSQL
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.3/linux_x86_64/snowsql-1.3.0-linux_x86_64.bash
          echo "526d59dd737b4164e6f376c6794648f83df1dc8ecdcfff15809b74e91ba231a3 snowsql-1.3.0-linux_x86_64.bash" | sha256sum -c -
          SNOWSQL_DEST=~/bin SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-1.3.0-linux_x86_64.bash

      - name: Upload application bundle to app stage
        run: |
          ~/bin/snowsql -o exit_on_error=true \
              -q 'put file://'$(pwd)'/app/src/* @app_stage/ overwrite=true auto_compress=false' -o friendly=false
        env:
          SNOWSQL_PWD: ${{ secrets.SNOWPARK_PUSH_SNOWFLAKE_PASSWORD }}
          SNOWSQL_USER: ${{ secrets.SNOWPARK_PUSH_SNOWFLAKE_USERNAME }}
          SNOWSQL_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWSQL_DATABASE: spcs_app
          SNOWSQL_SCHEMA: napp

      - name: Create Application patch version from bundle
        run: |
          ~/bin/snowsql -o exit_on_error=true \
              -q 'alter application package spcs_app_pkg add patch for version ${{ env.BASE_VERSION }} using @spcs_app.napp.app_stage' -o friendly=false
        env:
          SNOWSQL_PWD: ${{ secrets.SNOWPARK_PUSH_SNOWFLAKE_PASSWORD }}
          SNOWSQL_USER: ${{ secrets.SNOWPARK_PUSH_SNOWFLAKE_USERNAME }}
          SNOWSQL_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWSQL_DATABASE: spcs_app
          SNOWSQL_SCHEMA: napp

  upgrade-consumer-app:
    runs-on: ubuntu-latest
    needs:
      - create-patch-version
    steps:
      - name: Install SnowSQL
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.3/linux_x86_64/snowsql-1.3.0-linux_x86_64.bash
          echo "526d59dd737b4164e6f376c6794648f83df1dc8ecdcfff15809b74e91ba231a3 snowsql-1.3.0-linux_x86_64.bash" | sha256sum -c -
          SNOWSQL_DEST=~/bin SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-1.3.0-linux_x86_64.bash

      - name: upgrade version
        run: |
          ~/bin/snowsql -o exit_on_error=true \
               -q 'alter application spcs_app_instance upgrade using version V1' -o friendly=false
        env:

          SNOWSQL_PWD: ${{ secrets.SNOWPARK_CONSUMER_SNOWFLAKE_PASSWORD }}
          SNOWSQL_USER: ${{ secrets.SNOWPARK_CONSUMER_SNOWFLAKE_USERNAME }}
          SNOWSQL_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWSQL_DATABASE: spcs_app
          SNOWSQL_SCHEMA: napp

      - name: update running containers
        run: |
          ~/bin/snowsql -o exit_on_error=true \
              -q 'call spcs_app_instance.app_public.update_app()' -o friendly=false
        env:
          SNOWSQL_PWD: ${{ secrets.SNOWPARK_CONSUMER_SNOWFLAKE_PASSWORD }}
          SNOWSQL_USER: ${{ secrets.SNOWPARK_CONSUMER_SNOWFLAKE_USERNAME }}
          SNOWSQL_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWSQL_DATABASE: spcs_app
          SNOWSQL_SCHEMA: napp
